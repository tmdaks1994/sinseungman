<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:security="http://www.springframework.org/schema/security"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.1.xsd">
<!-- url패턴을 사용해서 스프링 시큐리티 필터를 무시하는 경로 추가하기(아래) -->
<security:http pattern="/**/*.js" security="none"></security:http>
<security:http pattern="/**/*.css" security="none"></security:http>
<security:http pattern="/**/img/*" security="none"></security:http>
<!-- 스프링 시큐리티 기본설정인 로그인페이지, 로그아웃 기능 사용하겠다고 명시 spEL언어를 사용가능 -->
<security:http auto-config="true" use-expressions="true">
	<security:session-management invalid-session-url="/">
		<!-- 동일ID의 세션 최대 개수가 3개, 그 이상일 경우 기존 세션 무효화(아래) -->
		<!-- 예를 들면, 노특북에서 로그인 이후 PC에서 로그인하면 노트북은 로그인세션이 사라집니다. -->
		<security:concurrency-control max-sessions="3" error-if-maximum-exceeded="false" />
	</security:session-management>
	<!-- 특정 url 패턴에 해당하는 권한 부여(아래) -->
	<security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')"/>
	<security:intercept-url pattern="/**/*_write" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')" method="GET"/>
	<security:intercept-url pattern="/**/*_update" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>
	<security:intercept-url pattern="/**/*_delete" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>
	<security:intercept-url pattern="/**/member/**" access="hasAnyRole('ROLE_USER,ROLE_ADMIN')"/>
	<security:intercept-url pattern="/**" access="permitAll"/>
	<security:csrf disabled="true"/>
	<security:form-login 
		login-page="/login"
		login-processing-url="/login"
		always-use-default-target="true"
		default-target-url="/login_success"
		authentication-failure-url="/login?msg=fail"
		username-parameter="user_id"
		password-parameter="user_pw"
	/>
	<security:remember-me key="remember-key" token-validity-seconds="604800" remember-me-parameter="remember-me-parameter" />
	<security:logout logout-url="/logout" logout-success-url="/" invalidate-session="true" 
		delete-cookies="JSESSIONID,SPRING_SECURITY_REMEMBER_ME_COOKIE" />
</security:http>
		<!-- 
	쿠키에는 간단한 텍스트문자 정보가 저장되어 있습니다.(접속한 PC기기에 저장)
	세션은 간단한 테스트문자 정보가 저장되어 있습니다.(접속한 서버기기에 저장)
	세션에 생성할 정보는 로그인한사람 이름, 로그인한사람 권한을 저장.. 
	-->	
	<!-- /home/login이렇게 경로를 사용하지 않고, /login으로 하는 이유는 공통기능은 경로제약사항을 안두려고 함-->
	<!-- HomeController클래스 Home22Controller클래스를 만들어서 사이트 리뉴얼 합니다. -->
	<!-- csrf:크로스사이트 리퀘스트 포거리: 교차사이트 요청 공격:기본은 csrf기능사용 기본일때는 jsp에서 폼전송태그를 jstl태그로 변경-->
	
	<!-- 인증 관련 아이디/암호 비교 설정-->
	<security:authentication-manager>
	<!-- 스프링에 내장되어 있는 인증제공자, userDetail과 userDetailService를 사용하겠다고 명시(아래) -->
		<security:authentication-provider>
			<security:jdbc-user-service 
				data-source-ref="dataSource"
				users-by-username-query="select user_id as no,user_pw as password, enabled from tbl_member where user_id = ?"
				authorities-by-username-query="select user_id as no,levels as authority from tbl_member where user_id = ?"
				/>
				<security:password-encoder ref="passwordEncoder" />
		</security:authentication-provider>
	</security:authentication-manager>
	<!-- 위 쿼리에서 사용할 패스워드 암호화 idpasswordEncoder 빈 클래스 생성 -->
	<bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	<!-- BCrypt패스워드인코더 클래스의 특징은 암호화 시키는 클래스. -->
</beans>         